import 'package:fixa/fixa_main_routes.dart';
import 'package:intl/intl.dart';
// import 'package:intl/intl.dart';

class HomeAssessWorkerController extends GetxController {
  final _dataProvider = DataProvider();
  final MainController mainController = Get.find();
  WorkerProfile workerProfile = WorkerProfile();
  bool isLoading = false;
  bool isLoadingSubmit = false;
  int serviceId = 0;
  final _apiHandler = ApiHandler();
  List<Assessment> assessmentsQuestions = [];
  List<AssessmentControllers> dataTest = [];
  // List<Map<String, dynamic>> dataTest = [
  //   {
  //     "question": "Productivity/ Target Achieved/ Speed (0-100%)",
  //     "description": "Task completion and performance percentage",
  //     "percentage": 0,
  //     "status": false
  //   },
  //   {
  //     "question": "Quality of the work (0-100%)",
  //     "description": "Quality percentage of the completed task",
  //     "percentage": 0,
  //     "status": false
  //   },
  //   {
  //     "question": "Retention",
  //     "description": "Retention over last 15 days (generated by the system)",
  //     "percentage": 60,
  //     "status": true
  //   }
  // ];

  getService({required int servcId}) {
    serviceId = servcId;
    update();
  }

  // get worker profile info
  getWorkerProfileInfo(
      {required int workerProjectId,
      required int workerId,
      required int assignedWorkerId}) async {
    isLoading = true;
    update();
    var response = await _dataProvider.getWorkerProfileInfo(
        endPoint:
            "${Enpoints.workerProfileInfoEnpoint}/$workerId?project_id=$workerProjectId");

    if (!response.error) {
      isLoading = false;
      workerProfile = response.response!;
      update();
    } else {
      isLoading = false;
      negativeMessage(message: response.errorMessage!);
      update();
    }
    isLoading = false;

    update();
  }

  setAnswer({required String text, required int metricId}) {
    for (var item in dataTest) {
      if (item.metricId == metricId) {
        var newText = text.isEmpty ? '0' : text;
        item.answer = int.parse(newText);
      }
    }
  }

  submit(
      {required int workerId,
      required BuildContext context,
      required int projectId,
      required int assignedWorkerId,
      required bool status}) async {
    try {
      isLoadingSubmit = true;
      update();
      int sumMean = 0;
      final DateFormat formatter = DateFormat('yyyy-MM-dd');
      final String formattedDate = formatter.format(DateTime.now());
      var headers = await _dataProvider.headerDetails();
      var user = await _dataProvider.getUserDetails();
      var results = [];
      for (var item in dataTest) {
        if (item.answer != 0) {
          sumMean = sumMean + item.answer;
          results
              .add({"assessment_metrics": item.metricId, "score": item.answer});
        }
      }
      var meanScore = sumMean / 2;
      var newMeanScore = meanScore.toInt();
      var body = {
        "worker_id": workerId,
        "assessment_level": 1,
        "assessments_results": results,
        "date": formattedDate,
        "done_by": user.user!.id,
        "mean_score": newMeanScore,
        "project_id": projectId,
        "service_id": serviceId
      };

      var response = await _apiHandler.postRequestMethod(
          headers: headers,
          body: body,
          endPoint: Enpoints.workerAssessmentEnpoint);
      var jsonResponse = jsonDecode(response.response!.body);

      if (response.error || jsonResponse['status'] == 'failed') {
        negativeMessage(message: '${jsonResponse['message']}');
        isLoadingSubmit = false;
        update();
      } else {
        positiveMessage(message: '${jsonResponse['message']}');
        if (status) {
          mainController.getAttendances(
              projectId: projectId, time: mainController.dateTme.value);
        } else {
          final WorkerProfileController workerProfileController = Get.find();
          workerProfileController.getWorkerProfileInfo(
              assignedWorkerId: assignedWorkerId,
              workerProjectId: projectId,
              workerId: workerId);
          mainController.getAttendances(
              projectId: projectId, time: mainController.dateTme.value);
        }
        isLoadingSubmit = false;
        update();
        Navigator.pop(context);
      }
      isLoadingSubmit = false;
      update();
    } catch (e) {
      isLoadingSubmit = false;
      update();
      negativeMessage(message: e.toString());
    }
  }

  getAssessmentsQuestions(
      {required int workerProjectId,
      required int workerId,
      required int assignedWorkerId}) async {
    isLoading = true;
    update();
    await getWorkerProfileInfo(
        workerProjectId: workerProjectId,
        workerId: workerId,
        assignedWorkerId: assignedWorkerId);
    var response = await _dataProvider.getAssessmentsQuestions(
        endPoint: Enpoints.assessmentEnpoint);
    if (response.error) {
      negativeMessage(message: '${response.errorMessage}');
      update();
    } else {
      assessmentsQuestions = response.response!;
      if (assessmentsQuestions.isNotEmpty) {
        for (var item in assessmentsQuestions[0].metrics!) {
          var assessmentQs = AssessmentControllers(
              item.id!,
              item.assessmentMetrics![0].metricName!.toLowerCase() ==
                      'retention'
                  ? 60
                  : 0,
              item.assessmentMetrics![0].metricName!.toLowerCase() ==
                      'retention'
                  ? true
                  : false,
              item.assessmentMetrics![0].metricName!,
              item.questions![0].questionDescription!.question!,
              0);
          dataTest.add(assessmentQs);
        }
      }
      update();
    }
    isLoading = false;
    update();
  }
}



// class HomeAssessWorkerController extends GetxController {
//   final WorkerProfileController _workerProfileController = Get.find();
//   final _dataProvider = DataProvider();
//   final _apiHandler = ApiHandler();
//   RxList<Assessment> assessments = <Assessment>[].obs;
//   RxBool isLoading = false.obs;
//   RxBool isSubmiting = false.obs;
//   RxList<Map<String, dynamic>> rankings = <Map<String, dynamic>>[].obs;
//   RxList<Map<String, dynamic>> rankingsMetrics = <Map<String, dynamic>>[].obs;

//   bool checkExistence({required int metricId, required int questionId}) {
//     bool isAvailable = false;
//     for (var item in rankings) {
//       if (item["code"] == "$metricId$questionId") {
//         isAvailable = true;
//         break;
//       }
//     }

//     return isAvailable;
//   }

//   String assessWorkerRate({required String rateKey}) {
//     String rateResult = "";
//     if (rateKey == "BB" ||
//         rateKey == "BI" ||
//         rateKey == "BA" ||
//         rateKey == "IB" ||
//         rateKey == "AB") {
//       rateResult = "Beginner";
//     } else if (rateKey == "II") {
//       rateResult = "Intermediate";
//     } else if (rateKey == "AI" || rateKey == "AA" || rateKey == "IA") {
//       rateResult = "Advanced";
//     } else {
//       rateResult = "Beginner";
//     }
//     return rateResult;
//   }

//   String rateQuestion(
//       {required int metricId, required List<Map<String, dynamic>> rankings}) {
//     String result = "";
//     var responseMetrics =
//         rankings.where((item) => item["metric_id"] == metricId).toList();
//     if (responseMetrics.length == 2) {
//       result = assessWorkerRate(
//           rateKey: responseMetrics[0]["rank_type_name"][0]
//                   .toString()
//                   .toUpperCase() +
//               responseMetrics[1]["rank_type_name"][0].toString().toUpperCase());
//     }
//     return result;
//   }

//   bool checkIfDataKeyIsPresent(
//       {required List<Map<String, dynamic>> data, required int idMetric}) {
//     bool isPresent = false;
//     for (var item in data) {
//       if (item["metric_id"] == idMetric) {
//         isPresent = true;
//         break;
//       }
//     }
//     return isPresent;
//   }

//   String getWorkerRateKey() {
//     String rateSum = "";
//     List<Map<String, dynamic>> data = [];
//     for (var item in rankings) {
//       String rateWorkerResult =
//           rateQuestion(metricId: item["metric_id"], rankings: rankings)[0]
//               .toString()
//               .toUpperCase();
//       if (!checkIfDataKeyIsPresent(data: data, idMetric: item["metric_id"])) {
//         data.add({"metric_id": item["metric_id"], "result": rateWorkerResult});
//       }
//     }
//     for (var item in data) {
//       rateSum = rateSum + item["result"];
//     }
//     return rateSum;
//   }

//   String setTotalRate() {
//     String totalRate = "";
//     String rateSUm = getWorkerRateKey();
//     if (rateSUm == "BBB" ||
//         rateSUm == "BBI" ||
//         rateSUm == "BIB" ||
//         rateSUm == "IBB" ||
//         rateSUm == "BBA" ||
//         rateSUm == "BAB" ||
//         rateSUm == "ABB") {
//       totalRate = "Beginner";
//     } else if (rateSUm == "III" ||
//         rateSUm == "IIB" ||
//         rateSUm == "BII" ||
//         rateSUm == "IBI" ||
//         rateSUm == "IIA" ||
//         rateSUm == "IAI" ||
//         rateSUm == "AII" ||
//         rateSUm == "ABI" ||
//         rateSUm == "AIB" ||
//         rateSUm == "IBA" ||
//         rateSUm == "BAI" ||
//         rateSUm == "BIA" ||
//         rateSUm == "IAB" ||
//         rateSUm == "IBA" ||
//         rateSUm == "IAB" ||
//         rateSUm == "ABI") {
//       totalRate = "Intermediate";
//     } else if (rateSUm == "AAA" ||
//         rateSUm == "AAI" ||
//         rateSUm == "AIA" ||
//         rateSUm == "IAA" ||
//         rateSUm == "AAB" ||
//         rateSUm == "ABA" ||
//         rateSUm == "BAA") {
//       totalRate = "Advanced";
//     }
//     return totalRate;
//   }

//   bool checkconstructAssessmentsResults(
//       {required List<Map<String, dynamic>> data, required int idMetric}) {
//     bool isPresent = false;
//     for (var item in data) {
//       if (item["assessment_metrics"] == idMetric) {
//         isPresent = true;
//         break;
//       }
//     }
//     return isPresent;
//   }

//   void setAnswer(
//       {required int metricId,
//       required int questionId,
//       required int rankTypeId,
//       required String rankTypeName}) {
//     if (checkExistence(metricId: metricId, questionId: questionId)) {
//       rankings
//           .removeWhere((element) => element["code"] == "$metricId$questionId");
//       rankings.add({
//         "metric_id": metricId,
//         "question_id": questionId,
//         "rankType_id": rankTypeId,
//         "rank_type_name": rankTypeName,
//         "code": "$metricId$questionId"
//       });
//     } else {
//       rankings.add({
//         "metric_id": metricId,
//         "question_id": questionId,
//         "rankType_id": rankTypeId,
//         "rank_type_name": rankTypeName,
//         "code": "$metricId$questionId"
//       });
//     }
//   }

//   List<Map<String, dynamic>> constructAssessmentsResults() {
//     List<Map<String, dynamic>> data = [];
//     for (var item in rankings) {
//       if (!checkconstructAssessmentsResults(
//           data: data, idMetric: item["metric_id"])) {
//         data.add({
//           "assessment_metrics": item["metric_id"],
//           "rank_type":
//               rateQuestion(metricId: item["metric_id"], rankings: rankings),
//         });
//       }
//     }
//     return data;
//   }

//   submit(
//       {required BuildContext context,
//       required int workerId,
//       required int assignWorkerId,
//       required int projectId,
//       required int levelAssessment}) async {
//     isSubmiting.value = true;
//     update();
//     if (rankings.length == 6) {
//       var user = await _dataProvider.getUserDetails();
//       final DateFormat formatter = DateFormat('yyyy-MM-dd');
//       final String formattedDate = formatter.format(DateTime.now());
//       String totalRate = setTotalRate();
//       var payload = {
//         "project_id": projectId,
//         "worker_id": workerId,
//         "assessment_level": levelAssessment,
//         "date": formattedDate,
//         "done_by": user.user!.id,
//         "total_rate": totalRate,
//         "assessments_results": constructAssessmentsResults()
//       };
//       var response = await _apiHandler.postRequestMethod(
//           headers: await _dataProvider.headerDetails(),
//           body: payload,
//           endPoint: Enpoints.workerAssessmentEnpoint);
//       if (response.error) {
//         negativeMessage(message: '${response.errorMessage}');

//         isSubmiting.value = false;
//         update();
//       } else {
//         await _workerProfileController.getWorkerProfileInfo(
//             assignedWorkerId: assignWorkerId,
//             workerId: workerId,
//             workerProjectId: projectId);
//         positiveMessage(message: 'Worker Assessed');

//         isSubmiting.value = false;
//         update();
//       }
//     } else {
//       negativeMessage(message: "Please rate all questions");
//       isSubmiting.value = false;
//     }
//     isSubmiting.value = false;
//     update();
//   }

//   void getAssessments({required int assessmentLevel}) async {
//     isLoading.value = true;
//     var response = await _dataProvider.getAssessments(
//         endPoint: "${Enpoints.assessmentEnpoint}?level=$assessmentLevel");
//     if (!response.error) {
//       isLoading.value = false;
//       assessments.value = response.response!;
//     } else {
//       isLoading.value = false;
//       negativeMessage(message: response.errorMessage!);
//     }
//     isLoading.value = false;
//   }
// }
